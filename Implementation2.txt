/*Implementation 3 using classes and objects*/
#include<iostream>
#include<stdlib.h>
#include<time.h>
#include<stdio.h>
#define N 10
using namespace std;
class process
{
public:
    process(){}
    ~process(){}
    void FCFS();
void SRN();
void RRS();//round robin scheduling
void MLS();//multilevel scheduling
void delay(unsigned int);
int Queue(int);
};

void process::delay(unsigned int ms)
{
    clock_t goal=ms + clock();
    while(goal>clock());
}
typedef struct
{
	int process_id, arrival_time, burst_time, priority;
	int q, ready;
}process_structure;

int process::Queue(int t1)
{
	if (t1 == 0 || t1 == 1 || t1 == 2 || t1 == 3)
	{
		return 1;
	}
	else
	{
		return 2;
	}
}

int main()
{
    process p;
     cout<<"Select the type of scheduling Algprithm :"<<endl;
    cout<<"1.Preemptive"<<endl;
    cout<<"2.Non Preemptive"<<endl;
    int mainchoice;
    cin>>mainchoice;
    system("cls");
    cout<<"Processing..";
    p.delay(2000);
    system("cls");
    if(mainchoice==2)
    {
        cout<<" Enter the chioce of scheduling :"<<endl;
    cout<<"1. First Come First Serve(FCFS)"<<endl;
    cout<<"2. Shortest Request Next(SRN)"<<endl;
    int choice;
    cin>>choice;
    if(choice==1)
        p.FCFS();
    if(choice==2)
        p.SRN();
    }
     if(mainchoice==1)
    {
        cout<<"Select the scheduling algorithm :"<<endl;
        cout<<"1. Round Robin Scheduling"<<endl;
        cout<<"2. Multilevel Scheduling"<<endl;
        int choice;
        cin>>choice;
        system("cls");
        cout<<"Processing ....";
        p.delay(2000);
        system("cls");
        if(choice==1)
            p.RRS();
        if(choice==2)
            p.MLS();

    }
}
void process::FCFS()
{
    system("cls");
          cout<<"          First Come First Served (FCFS) is a Non-Preemptive scheduling algorithm. FIFO (First In\n\
          First Out) strategy assigns priority to process in the order in which they request the proces\n\
          sor. The process that requests the CPU first is allocated the CPU first. This is easily imple\n\
          mented with a FIFO queue for managing the tasks. As the process come in, they are put at \n\
          the end of the queue. As the CPU finishes each task, it removes it from the start of the \n\
          queue and heads on to the next task.";
          delay(10000);
          system("cls");
          int n,bt[20],wt[20],tat[20],avwt=0,avtat=0,i,j;
          cout<<"Enter total number of processes(maximum 20):";
          cin>>n;
          cout<<"\nEnter Process Burst Time\n";
          for(i=0;i<n;i++)
         {
             cout<<"P["<<i+1<<"]:";
             cin>>bt[i];
         }
         system("cls");
         cout<<" Starting execution ...Please wait."<<endl;
         delay(3000);
         system("cls");
         cout<<"Calculating End Results....Please wait"<<endl;
         delay(3000);
         wt[0]=0;    //waiting time for first process is 0

         //calculating waiting time
         for(i=1;i<n;i++)
         {
             wt[i]=0;
             for(j=0;j<i;j++)
                 wt[i]+=bt[j];
         }

         cout<<"\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time";

         //calculating turnaround time
         for(i=0;i<n;i++)
         {
             tat[i]=bt[i]+wt[i];
             avwt+=wt[i];
             avtat+=tat[i];
             cout<<"\nP["<<i+1<<"]"<<"\t\t"<<bt[i]<<"\t\t"<<wt[i]<<"\t\t"<<tat[i];
         }

         avwt/=i;
         avtat/=i;
         cout<<"\n\nAverage Waiting Time : "<<avwt;
         cout<<"\nAverage Turnaround Time : "<<avtat;
         delay(10000);
         exit(0);
}
void process::SRN()
{
    system("cls");
         cout<<"      Shortest job next (SJN), also known as shortest job first (SJF) or shortest \n\
         process next (SPN), is a scheduling policy that selects for execution the waiting \n\
         process with the smallest execution time.SJN is a non-preemptive algorithm. ";
         delay(5000);
         system("cls");
         int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
         float avg_wt,avg_tat;
         printf("Enter number of process:");
         scanf("%d",&n);

         printf("\nEnter Burst Time:\n");
         for(i=0;i<n;i++)
         {
              printf("p%d:",i+1);
              scanf("%d",&bt[i]);
              p[i]=i+1;           //contains process number
         }

         //sorting burst time in ascending order using selection sort
         for(i=0;i<n;i++)
         {
             pos=i;
             for(j=i+1;j<n;j++)
             {
                  if(bt[j]<bt[pos])
                     pos=j;
             }

              temp=bt[i];
              bt[i]=bt[pos];
              bt[pos]=temp;

              temp=p[i];
              p[i]=p[pos];
              p[pos]=temp;
         }

         wt[0]=0;            //waiting time for first process will be zero

         //calculate waiting time
         for(i=1;i<n;i++)
         {
             wt[i]=0;
             for(j=0;j<i;j++)
                 wt[i]+=bt[j];

             total+=wt[i];
         }

         avg_wt=(float)total/n;      //average waiting time
         total=0;
          system("cls");
         cout<<" Starting execution ...Please wait."<<endl;
         delay(3000);
         system("cls");
         cout<<"Calculating End Results....Please wait"<<endl;
         system("cls");
         printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
         for(i=0;i<n;i++)
         {
             tat[i]=bt[i]+wt[i];     //calculate turnaround time
             total+=tat[i];
             printf("\np%d\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
         }

         avg_tat=(float)total/n;     //average turnaround time
         printf("\n\nAverage Waiting Time=%f",avg_wt);
         printf("\nAverage Turnaround Time=%f\n",avg_tat);
         delay(10000);
         exit(0);
}
void process::RRS()
{

            cout<<"       Round Robin is the preemptive process scheduling algorithm.\n\
            Each process is provided a fix time to execute, it is called a quantum.\n\
            Once a process is executed for a given time period, it is preempted and \n\
            other process executes for a given time period.";
            delay(8000);
            system("cls");


            int i, limit, total = 0, x, counter = 0, time_quantum;
  	        int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
	        float average_wait_time, average_turnaround_time;
  	        printf("\nEnter Total Number of Processes:\t");
  	        scanf("%d", &limit);
  	         x = limit;
  	         for(i = 0; i < limit; i++)
  	         {
		          printf("\nEnter Details of Process[%d]\n", i + 1);
    		      printf("Arrival Time:\t");
    		      scanf("%d", &arrival_time[i]);
		          printf("Burst Time:\t");
    		      scanf("%d", &burst_time[i]);
    		      temp[i] = burst_time[i];
  	        }
  	        printf("\nEnter Time Quantum:\t");
  	        scanf("%d", &time_quantum);
  	        system("cls");
  	        cout<<"Collecting End results.....Please wait";
  	        delay(3000);
  	        system("cls");
     	    printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");
  	      for(total = 0, i = 0; x != 0;)
  	      {
    		  if(temp[i] <= time_quantum && temp[i] > 0)
    		  {
      			total = total + temp[i];
      			temp[i] = 0;
      			counter = 1;
    		   }
    		   else if(temp[i] > 0)
    		   {
      			temp[i] = temp[i] - time_quantum;
      		    	total = total + time_quantum;
    		   }
    		   if(temp[i] == 0 && counter == 1)
    		  {
      			x--;
 			    printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
      			wait_time = wait_time + total - arrival_time[i] - burst_time[i];
      			turnaround_time = turnaround_time + total - arrival_time[i];
      			counter = 0;
    		 }
    		 if(i == limit - 1)
      		{
			i = 0;
		}
    		else if(arrival_time[i + 1] <= total)
      		{
			i++;
		}
    		else
      		{
			i = 0;
		}
	}
	average_wait_time = wait_time * 1.0 / limit;
	average_turnaround_time = turnaround_time * 1.0 / limit;

  	printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
  	printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
  	delay(10000);
  	exit(0);
}
void process::MLS()
{
     cout<<"     In the Multi Level Queue Scheduling Algorithm, the processes are\n\
               permanently assigned to a Queue whereas in a Multi Level Feedback Scheduling \n\
               Algorithm, the processes can move between multiple Queues according to their\n\
               requirements. If a process has a large burst-time, then it is automatically \n\
               moved to a lower-priority queue.";
               delay(8000);
               system("cls");

               	int limit, count, temp_process, time, j, y;
	process_structure temp;
	printf("Enter Total Number of Processes:\t");
	scanf("%d", &limit);
	process_structure process[limit];
	for(count = 0; count < limit; count++)
	{
		printf("\nProcess ID:\t");
		scanf("%d", &process[count].process_id);
		printf("Arrival Time:\t");
		scanf("%d", &process[count].arrival_time);
		printf("Burst Time:\t");
		scanf("%d", &process[count].burst_time);
		printf("Process Priority:\t");
		scanf("%d", &process[count].priority);
		temp_process = process[count].priority;
		process[count].q = Queue(temp_process);
		process[count].ready = 0;
	}
	system("cls");
	cout<<"Collecting Results....Please wait";
	delay(3000);
	system("cls");
	time = process[0].burst_time;
	for(y = 0; y < limit; y++)
	{
		for(count = y; count < limit; count++)
		{
			if(process[count].arrival_time < time)
			{
 				process[count].ready = 1;
			}
		}
		for(count = y; count < limit - 1; count++)
		{
 			for(j = count + 1; j < limit; j++)
			{
				if(process[count].ready == 1 && process[j].ready == 1)
				{
					if(process[count].q == 2 && process[j].q == 1)
					{
						temp = process[count];
						process[count] = process[j];
						process[j] = temp;
					}
				}
			}
		}
		for(count = y; count < limit - 1; count++)
		{
			for(j = count + 1; j < limit; j++)
			{
				if(process[count].ready == 1 && process[j].ready == 1)
				{
					if(process[count].q == 1 && process[j].q == 1)
					{
						if(process[count].burst_time > process[j].burst_time)
						{
							temp = process[count];
							process[count] = process[j];
							process[j] = temp;
						}
						else
						{
							break;
						}
					}
				}
			}
		}
		printf("\nProcess[%d]:\tTime:\t%d To %d\n", process[y].process_id, time, time + process[y].burst_time);
		time = time + process[y].burst_time;
		for(count = y; count < limit; count++)
		{
			if(process[count].ready == 1)
			{
				process[count].ready = 0;
			}
		}
	}
	delay(10000);
	exit(0);
}
